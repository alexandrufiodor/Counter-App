{"version":3,"sources":["reportWebVitals.ts","Buttons/Button.tsx","Counter/CounterNum/CounterNum.tsx","Counter/Counter.tsx","Settings/SettingsValue/SettingsValue.tsx","Settings/Settings.tsx","state/settings-reducer.ts","AppWithRedux.tsx","state/store.ts","utils/utils.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Button","props","className","onClick","disabled","name","CounterNum","count","maxValue","error","Counter","incCallback","resetCallback","startValue","SettingsValue","type","value","onChange","e","currentTarget","valueAsNumber","Settings","onChangeMax","onChangeStart","setCallback","initialState","settingDisabled","AppWithRedux","dispatch","useDispatch","setting","useSelector","state","settings","changeMaxValueAC","changeStartValueAC","rootReducer","combineReducers","action","stateCopy","store","createStore","serializedState","localStorage","getItem","JSON","parse","loadState","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","getState","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b7da7ccd.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\n\r\ntype IncButtonPropsType = {\r\n    onClick: () => void\r\n    disabled: boolean\r\n    name: string\r\n}\r\n\r\nexport const Button = (props: IncButtonPropsType) => {\r\n    return <button className='inc' onClick={props.onClick} disabled={props.disabled}>{props.name}</button>\r\n}\r\n","import React from \"react\";\r\n\r\ntype DisplayPropsType = {\r\n    error: string\r\n    count: number | string\r\n    maxValue: number\r\n}\r\n\r\nexport const CounterNum = (props: DisplayPropsType) => {\r\n    return <div className='display'>\r\n        <p className={(props.count === props.maxValue && props.maxValue > 0 || props.error !== '') ? 'active' : ''}> {props.error == '' ? props.count : props.error}</p>\r\n    </div>\r\n\r\n}","import React from \"react\";\r\nimport {Button} from \"../Buttons/Button\";\r\nimport {CounterNum} from \"./CounterNum/CounterNum\";\r\n\r\ntype DisplayValuePropsType = {\r\n    error: string\r\n    count: number | string\r\n    maxValue: number\r\n    startValue: number\r\n    incCallback: () => void\r\n    resetCallback: () => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const Counter = (props: DisplayValuePropsType) => {\r\n    return (\r\n        <>\r\n            <CounterNum count={props.count} maxValue={props.maxValue} error={props.error}/>\r\n\r\n            <div className='buttons'>\r\n                <Button name={'inc'} onClick={props.incCallback} disabled={props.count === props.maxValue || props.disabled || props.error !== ''}/>\r\n                <Button name={'reset'} onClick={props.resetCallback} disabled={props.count === props.startValue || props.disabled || props.error !== ''}/>\r\n\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\ntype SettingsValuePropsType = {\r\n    value: number\r\n    onChange: (value: number) => void\r\n}\r\n\r\nexport const SettingsValue = (props: SettingsValuePropsType) => {\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChange(e.currentTarget.valueAsNumber)\r\n    }\r\n    return (\r\n        <>\r\n            <input type=\"number\" value={props.value} onChange={onChange}/>\r\n        </>\r\n    );\r\n}","import {Button} from \"../Buttons/Button\";\r\nimport React, {useState} from \"react\";\r\nimport {SettingsValue} from \"./SettingsValue/SettingsValue\";\r\n\r\ntype SetValuePropsType = {\r\n    startValue: number\r\n    maxValue: number\r\n    setCallback: () => void\r\n    onChangeMax: (value: number) => void\r\n    onChangeStart: (value: number) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const Settings = (props: SetValuePropsType) => {\r\n\r\n    // const [maxValue, setMaxValue] = useState(0);\r\n    // const [startValue, setStartValue] = useState(0);\r\n\r\n\r\n    return (\r\n        <>\r\n            <div> max value: <SettingsValue value={props.maxValue} onChange={props.onChangeMax}/></div>\r\n            <div> start value: <SettingsValue value={props.startValue} onChange={props.onChangeStart}/></div>\r\n            <div className='buttons'>\r\n                <Button name={'set'} onClick={props.setCallback}\r\n                        disabled={props.startValue >= props.maxValue || props.startValue < 0 || props.maxValue < 1 || props.disabled}/>\r\n            </div>\r\n        </>\r\n    );\r\n}","type ActionType =\r\n    ChangeMaxValueActionType\r\n    | ChangeStartValueActionType\r\n    | SetValueActionType\r\n    | IncValueActionType\r\n    | ResetValueActionType\r\n\r\nexport type ChangeMaxValueActionType = {\r\n    type: 'CHANGE-MAX-VALUE',\r\n    value: number\r\n}\r\nexport type ChangeStartValueActionType = {\r\n    type: 'CHANGE-START-VALUE',\r\n    value: number\r\n}\r\nexport type SetValueActionType = {\r\n    type: 'SET-VALUE'\r\n}\r\nexport type IncValueActionType = {\r\n    type: 'INC-VALUE'\r\n}\r\nexport type ResetValueActionType = {\r\n    type: 'RESET-VALUE'\r\n}\r\nexport type stateType = {\r\n    count: number,\r\n    maxValue: number,\r\n    startValue: number,\r\n    error: string,\r\n    settingDisabled: boolean\r\n}\r\nconst initialState: stateType = {\r\n    count: 0,\r\n    maxValue: 0,\r\n    startValue: 0,\r\n    error: '',\r\n    settingDisabled: false\r\n}\r\n\r\nexport const settingsReducer = (state: stateType = initialState, action: ActionType): stateType => {\r\n    switch (action.type) {\r\n        case 'CHANGE-MAX-VALUE': {\r\n            const stateCopy = {...state};\r\n            stateCopy.maxValue = action.value;\r\n            if (action.value < 1 || action.value <= stateCopy.startValue) {\r\n                stateCopy.error = 'error';\r\n            } else {\r\n                stateCopy.error = '';\r\n            }\r\n            if (action.value >= 1 || action.value > stateCopy.startValue) {\r\n                stateCopy.settingDisabled = false\r\n            }\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-START-VALUE': {\r\n            const stateCopy = {...state};\r\n            stateCopy.startValue = action.value;\r\n            if (action.value < 0 || action.value >= stateCopy.maxValue) {\r\n                stateCopy.error = 'Incorrect value';\r\n            } else {\r\n                stateCopy.error = '';\r\n            }\r\n\r\n            if (action.value >= 0 || action.value < stateCopy.maxValue) {\r\n                stateCopy.settingDisabled = false\r\n            }\r\n            return stateCopy;\r\n        }\r\n        case 'SET-VALUE': {\r\n            const stateCopy = {...state};\r\n            stateCopy.count = stateCopy.startValue\r\n            stateCopy.settingDisabled = true\r\n            return stateCopy;\r\n        }\r\n        case 'INC-VALUE': {\r\n            const stateCopy = {...state};\r\n            if (typeof stateCopy.count == 'number') {\r\n                stateCopy.count++\r\n            }\r\n            return stateCopy;\r\n        }\r\n        case 'RESET-VALUE': {\r\n            const stateCopy = {...state};\r\n            stateCopy.count = stateCopy.startValue\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const changeMaxValueAC = (value: number): ChangeMaxValueActionType => {\r\n    return {type: 'CHANGE-MAX-VALUE', value: value}\r\n}\r\nexport const changeStartValueAC = (value: number): ChangeStartValueActionType => {\r\n    return {type: 'CHANGE-START-VALUE', value: value}\r\n}\r\nexport const setValueAC = (): SetValueActionType => {\r\n    return {type: 'SET-VALUE'}\r\n}\r\nexport const incValueAC = (): IncValueActionType => {\r\n    return {type: 'INC-VALUE'}\r\n}\r\nexport const resetValueAC = (): ResetValueActionType => {\r\n    return {type: 'RESET-VALUE'}\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./Counter/Counter\";\nimport {Settings} from \"./Settings/Settings\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    changeMaxValueAC,\n    changeStartValueAC,\n    incValueAC,\n    resetValueAC,\n    setValueAC,\n    stateType\n} from \"./state/settings-reducer\";\nimport {AppRootState} from \"./state/store\";\n\nfunction AppWithRedux() {\n\n    const dispatch = useDispatch();\n    const setting = useSelector<AppRootState, stateType>(state => state.settings)\n    //\n    // useEffect(() => {\n    //     let countAsString = localStorage.getItem('count')\n    //     let maxValueAsString = localStorage.getItem('maxValue')\n    //     let startValueAsString = localStorage.getItem('startValue')\n    //     if (countAsString && maxValueAsString && startValueAsString) {\n    //\n    //         setCount(JSON.parse(countAsString))\n    //         setMaxValue(JSON.parse(maxValueAsString))\n    //         setStartValue(JSON.parse(startValueAsString))\n    //     }\n    // }, [])\n\n    //\n    // useEffect(() => {\n    //     localStorage.setItem('count', JSON.stringify(count))\n    //     localStorage.setItem('maxValue', JSON.stringify(maxValue))\n    //     localStorage.setItem('startValue', JSON.stringify(startValue))\n    // }, [count, maxValue, startValue])\n\n\n    const resetCallback = () => {\n        dispatch(resetValueAC())\n\n    }\n\n    const setCallback = () => {\n        dispatch(setValueAC())\n    }\n    const incCallback = () => {\n        dispatch(incValueAC())\n    }\n    const onChangeMax = (value: number) => {\n        dispatch(changeMaxValueAC(value))\n    }\n\n    const onChangeStart = (value: number) => {\n        dispatch(changeStartValueAC(value))\n    }\n\n    return (\n        <>\n            <div className=\"container\">\n                <Counter count={setting.count} maxValue={setting.maxValue} startValue={setting.startValue}\n                         incCallback={incCallback}\n                         resetCallback={resetCallback} error={setting.error} disabled={!setting.settingDisabled}/>\n\n            </div>\n            <div className=\"container\">\n                <Settings startValue={setting.startValue} maxValue={setting.maxValue} onChangeMax={onChangeMax}\n                          onChangeStart={onChangeStart} setCallback={setCallback} disabled={setting.settingDisabled}/>\n            </div>\n        </>\n    );\n\n}\n\nexport default AppWithRedux;\n\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {settingsReducer} from \"./settings-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {loadState, saveState} from \"../utils/utils\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    settings: settingsReducer,\r\n})\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, loadState(), applyMiddleware(thunk));\r\n\r\n\r\nstore.subscribe(() => {\r\n        saveState({\r\n            settings: store.getState().settings\r\n        })\r\n    }\r\n)\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import {AppRootState} from \"../state/store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('counterValue')\r\n        if (serializedState === null) {\r\n            return undefined\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (e) {\r\n        return undefined\r\n    }\r\n}\r\n\r\nexport const saveState = (state: AppRootState) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state)\r\n        localStorage.setItem('counterValue', serializedState)\r\n    } catch (e) {\r\n        // error\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport AppWithRedux from './AppWithRedux';\nimport {store} from \"./state/store\";\n\nReactDOM.render(\n      <Provider store={store}>\n          <AppWithRedux/>\n      </Provider> ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}